# number_of_dogs = 1
# # string
# # """"""
# # iterable
# # """"""
#
#
# a = "string"
# a = a[0] +'T' + a[2:]
# print(a[0])
# a = "sTring"
# print(a[0])
# b = "another string"
# c = """""
# new
# name
# """""
# print(c)
#
# name = "anna\n"
# surname = "yadevich"
# print(name *3)
#
# a = "new"
# print(a.index("w"))
#
# a = "nekjgkgkWnknkkbWkbkbbW"
# print(a.split(sep= "W"))
#
# # TODO Add usefull examples
#
# a = 0
# # some code
# # if da:
# a = a + 1
# print(a)
#
# a: int = 1
# print(a)
#

a = input("введите глагол: ")
ing_form = a + "ing"
print(f"Инговая форма глагола '{a}' - это '{ing_form}'.")





"""
Strings
"""
a = "Я строка"
b = "104"  # это тоже строка

# конкатенация
print(a + b)

# умножение
print(b * 104)

# доступ по индексу (индекс начинается с нуля, не с единицы)
print(a[0])

# срезы строк разберем вместе со списками

# примеры использования методов для срок
string = "          Я длинная строка с разными недостатками и скрытыми секретами           "
# длинна строки
print(len(string))

# поиск подстроки в строке -- "яб" в слове "яблоко"
print(string.find("секрет"))

# тоже поиск поиск подстроки в строке
print(string.index("секрет"))
# Пример использования из жизни -- вы поверяете текст СМС сообщения на наличие имени адресата.
# поэкспериментируйте с ними и найдите в чем отличие


# замена части строки
print(string.replace("недостатками", "преимуществами"))
# Пример использования из жизни -- у вас есть базовый текст СМС-ки в котором имя адресата заменено на заглушку <NAME>.
# Имя адресата по тесту вы знаете. С помощью этого метода вы можете подготовить ожидаемый результат для сравнения.

# Разделение строки по выбранному разделителю
print(string.split(sep=" "))
# Пример использования из жизни -- Иногда в тестах нужно автоматически читать сообщения от сервера.
# Если это лог-файл (файл в котором приложение хранит записи о своей активности) сообщения могут быть рпедставлены
# в виде сплошного полотна текста. С помощью этого метода можно разделить полодно текста
# на отдельные сообщения и работать с ними.


"""
Integers
Целые числа без точки. 
С ними доступны математические операции и операции сравнения

Float
То же самое, только с точкой (числа с десятичной дробью)
взаимодействия те же


Обратите внимание на 
//  -- целочисленное деление 
Пример из жизни  -- Есть большой список с данными который нужно разбить на равные части, а остатком пренебречь

%  -- остаток от деления

Пример из жизни  -- Определение чет/нечет
Так же можно разделять числа на составляющие 
"""
int_num = 57
# единицы
print(int_num % 10)
# десятки
print(int_num // 10)
# и т.д. П.С. да, можно число превратить в строку и по индексам пройтись.

"""
Bool
Да или нет
True или False

Обретают смысл в операциях сравнения и преобразовании в булево значение переменных другого типа 
(проверки тестов строятся на булевых значениях)
"""